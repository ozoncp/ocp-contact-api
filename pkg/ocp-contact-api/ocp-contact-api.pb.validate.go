// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/ocp-contact-api/ocp-contact-api.proto

package ocp_contact_api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on ListContactsV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListContactsV1Request) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Limit

	// no validation rules for Offset

	return nil
}

// ListContactsV1RequestValidationError is the validation error returned by
// ListContactsV1Request.Validate if the designated constraints aren't met.
type ListContactsV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListContactsV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListContactsV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListContactsV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListContactsV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListContactsV1RequestValidationError) ErrorName() string {
	return "ListContactsV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListContactsV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListContactsV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListContactsV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListContactsV1RequestValidationError{}

// Validate checks the field values on ListContactsV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListContactsV1Response) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetContacts() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListContactsV1ResponseValidationError{
					field:  fmt.Sprintf("Contacts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListContactsV1ResponseValidationError is the validation error returned by
// ListContactsV1Response.Validate if the designated constraints aren't met.
type ListContactsV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListContactsV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListContactsV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListContactsV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListContactsV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListContactsV1ResponseValidationError) ErrorName() string {
	return "ListContactsV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListContactsV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListContactsV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListContactsV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListContactsV1ResponseValidationError{}

// Validate checks the field values on CreateContactV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateContactV1Request) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	// no validation rules for Type

	// no validation rules for Text

	return nil
}

// CreateContactV1RequestValidationError is the validation error returned by
// CreateContactV1Request.Validate if the designated constraints aren't met.
type CreateContactV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateContactV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateContactV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateContactV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateContactV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateContactV1RequestValidationError) ErrorName() string {
	return "CreateContactV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateContactV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateContactV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateContactV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateContactV1RequestValidationError{}

// Validate checks the field values on CreateContactV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateContactV1Response) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ContactId

	return nil
}

// CreateContactV1ResponseValidationError is the validation error returned by
// CreateContactV1Response.Validate if the designated constraints aren't met.
type CreateContactV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateContactV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateContactV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateContactV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateContactV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateContactV1ResponseValidationError) ErrorName() string {
	return "CreateContactV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateContactV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateContactV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateContactV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateContactV1ResponseValidationError{}

// Validate checks the field values on RemoveContactV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveContactV1Request) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetContactId() <= 0 {
		return RemoveContactV1RequestValidationError{
			field:  "ContactId",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// RemoveContactV1RequestValidationError is the validation error returned by
// RemoveContactV1Request.Validate if the designated constraints aren't met.
type RemoveContactV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveContactV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveContactV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveContactV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveContactV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveContactV1RequestValidationError) ErrorName() string {
	return "RemoveContactV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveContactV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveContactV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveContactV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveContactV1RequestValidationError{}

// Validate checks the field values on RemoveContactV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveContactV1Response) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Result

	return nil
}

// RemoveContactV1ResponseValidationError is the validation error returned by
// RemoveContactV1Response.Validate if the designated constraints aren't met.
type RemoveContactV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveContactV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveContactV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveContactV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveContactV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveContactV1ResponseValidationError) ErrorName() string {
	return "RemoveContactV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveContactV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveContactV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveContactV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveContactV1ResponseValidationError{}

// Validate checks the field values on DescribeContactV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DescribeContactV1Request) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetContactId() <= 0 {
		return DescribeContactV1RequestValidationError{
			field:  "ContactId",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// DescribeContactV1RequestValidationError is the validation error returned by
// DescribeContactV1Request.Validate if the designated constraints aren't met.
type DescribeContactV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeContactV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeContactV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeContactV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeContactV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeContactV1RequestValidationError) ErrorName() string {
	return "DescribeContactV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeContactV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeContactV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeContactV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeContactV1RequestValidationError{}

// Validate checks the field values on DescribeContactV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DescribeContactV1Response) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetContact()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DescribeContactV1ResponseValidationError{
				field:  "Contact",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DescribeContactV1ResponseValidationError is the validation error returned by
// DescribeContactV1Response.Validate if the designated constraints aren't met.
type DescribeContactV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeContactV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeContactV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeContactV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeContactV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeContactV1ResponseValidationError) ErrorName() string {
	return "DescribeContactV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeContactV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeContactV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeContactV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeContactV1ResponseValidationError{}

// Validate checks the field values on UpdateContactV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateContactV1Request) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetContact()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateContactV1RequestValidationError{
				field:  "Contact",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateContactV1RequestValidationError is the validation error returned by
// UpdateContactV1Request.Validate if the designated constraints aren't met.
type UpdateContactV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateContactV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateContactV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateContactV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateContactV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateContactV1RequestValidationError) ErrorName() string {
	return "UpdateContactV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateContactV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateContactV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateContactV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateContactV1RequestValidationError{}

// Validate checks the field values on UpdateContactV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateContactV1Response) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Updated

	return nil
}

// UpdateContactV1ResponseValidationError is the validation error returned by
// UpdateContactV1Response.Validate if the designated constraints aren't met.
type UpdateContactV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateContactV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateContactV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateContactV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateContactV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateContactV1ResponseValidationError) ErrorName() string {
	return "UpdateContactV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateContactV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateContactV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateContactV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateContactV1ResponseValidationError{}

// Validate checks the field values on MultiCreateContactsV1Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MultiCreateContactsV1Request) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetContacts()) < 1 {
		return MultiCreateContactsV1RequestValidationError{
			field:  "Contacts",
			reason: "value must contain at least 1 item(s)",
		}
	}

	for idx, item := range m.GetContacts() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MultiCreateContactsV1RequestValidationError{
					field:  fmt.Sprintf("Contacts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// MultiCreateContactsV1RequestValidationError is the validation error returned
// by MultiCreateContactsV1Request.Validate if the designated constraints
// aren't met.
type MultiCreateContactsV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MultiCreateContactsV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MultiCreateContactsV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MultiCreateContactsV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MultiCreateContactsV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MultiCreateContactsV1RequestValidationError) ErrorName() string {
	return "MultiCreateContactsV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e MultiCreateContactsV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMultiCreateContactsV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MultiCreateContactsV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MultiCreateContactsV1RequestValidationError{}

// Validate checks the field values on MultiCreateContactsV1Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MultiCreateContactsV1Response) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Count

	return nil
}

// MultiCreateContactsV1ResponseValidationError is the validation error
// returned by MultiCreateContactsV1Response.Validate if the designated
// constraints aren't met.
type MultiCreateContactsV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MultiCreateContactsV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MultiCreateContactsV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MultiCreateContactsV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MultiCreateContactsV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MultiCreateContactsV1ResponseValidationError) ErrorName() string {
	return "MultiCreateContactsV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e MultiCreateContactsV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMultiCreateContactsV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MultiCreateContactsV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MultiCreateContactsV1ResponseValidationError{}

// Validate checks the field values on Contact with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Contact) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for UserId

	// no validation rules for Type

	// no validation rules for Text

	return nil
}

// ContactValidationError is the validation error returned by Contact.Validate
// if the designated constraints aren't met.
type ContactValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContactValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContactValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContactValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContactValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContactValidationError) ErrorName() string { return "ContactValidationError" }

// Error satisfies the builtin error interface
func (e ContactValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContact.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContactValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContactValidationError{}
