// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ocp_contact_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OcpContactApiClient is the client API for OcpContactApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OcpContactApiClient interface {
	// Update contact
	UpdateContactV1(ctx context.Context, in *UpdateContactV1Request, opts ...grpc.CallOption) (*UpdateContactV1Response, error)
	// Create list of contacts
	MultiCreateContactsV1(ctx context.Context, in *MultiCreateContactsV1Request, opts ...grpc.CallOption) (*MultiCreateContactsV1Response, error)
	// Returns a list of the contact
	ListContactsV1(ctx context.Context, in *ListContactsV1Request, opts ...grpc.CallOption) (*ListContactsV1Response, error)
	// Returns contact description by id
	DescribeContactV1(ctx context.Context, in *DescribeContactV1Request, opts ...grpc.CallOption) (*DescribeContactV1Response, error)
	// Create a new contact
	CreateContactV1(ctx context.Context, in *CreateContactV1Request, opts ...grpc.CallOption) (*CreateContactV1Response, error)
	// Remove contact by id
	RemoveContactV1(ctx context.Context, in *RemoveContactV1Request, opts ...grpc.CallOption) (*RemoveContactV1Response, error)
}

type ocpContactApiClient struct {
	cc grpc.ClientConnInterface
}

func NewOcpContactApiClient(cc grpc.ClientConnInterface) OcpContactApiClient {
	return &ocpContactApiClient{cc}
}

func (c *ocpContactApiClient) UpdateContactV1(ctx context.Context, in *UpdateContactV1Request, opts ...grpc.CallOption) (*UpdateContactV1Response, error) {
	out := new(UpdateContactV1Response)
	err := c.cc.Invoke(ctx, "/ocp.contact.api.OcpContactApi/UpdateContactV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpContactApiClient) MultiCreateContactsV1(ctx context.Context, in *MultiCreateContactsV1Request, opts ...grpc.CallOption) (*MultiCreateContactsV1Response, error) {
	out := new(MultiCreateContactsV1Response)
	err := c.cc.Invoke(ctx, "/ocp.contact.api.OcpContactApi/MultiCreateContactsV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpContactApiClient) ListContactsV1(ctx context.Context, in *ListContactsV1Request, opts ...grpc.CallOption) (*ListContactsV1Response, error) {
	out := new(ListContactsV1Response)
	err := c.cc.Invoke(ctx, "/ocp.contact.api.OcpContactApi/ListContactsV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpContactApiClient) DescribeContactV1(ctx context.Context, in *DescribeContactV1Request, opts ...grpc.CallOption) (*DescribeContactV1Response, error) {
	out := new(DescribeContactV1Response)
	err := c.cc.Invoke(ctx, "/ocp.contact.api.OcpContactApi/DescribeContactV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpContactApiClient) CreateContactV1(ctx context.Context, in *CreateContactV1Request, opts ...grpc.CallOption) (*CreateContactV1Response, error) {
	out := new(CreateContactV1Response)
	err := c.cc.Invoke(ctx, "/ocp.contact.api.OcpContactApi/CreateContactV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpContactApiClient) RemoveContactV1(ctx context.Context, in *RemoveContactV1Request, opts ...grpc.CallOption) (*RemoveContactV1Response, error) {
	out := new(RemoveContactV1Response)
	err := c.cc.Invoke(ctx, "/ocp.contact.api.OcpContactApi/RemoveContactV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OcpContactApiServer is the server API for OcpContactApi service.
// All implementations must embed UnimplementedOcpContactApiServer
// for forward compatibility
type OcpContactApiServer interface {
	// Update contact
	UpdateContactV1(context.Context, *UpdateContactV1Request) (*UpdateContactV1Response, error)
	// Create list of contacts
	MultiCreateContactsV1(context.Context, *MultiCreateContactsV1Request) (*MultiCreateContactsV1Response, error)
	// Returns a list of the contact
	ListContactsV1(context.Context, *ListContactsV1Request) (*ListContactsV1Response, error)
	// Returns contact description by id
	DescribeContactV1(context.Context, *DescribeContactV1Request) (*DescribeContactV1Response, error)
	// Create a new contact
	CreateContactV1(context.Context, *CreateContactV1Request) (*CreateContactV1Response, error)
	// Remove contact by id
	RemoveContactV1(context.Context, *RemoveContactV1Request) (*RemoveContactV1Response, error)
	mustEmbedUnimplementedOcpContactApiServer()
}

// UnimplementedOcpContactApiServer must be embedded to have forward compatible implementations.
type UnimplementedOcpContactApiServer struct {
}

func (UnimplementedOcpContactApiServer) UpdateContactV1(context.Context, *UpdateContactV1Request) (*UpdateContactV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateContactV1 not implemented")
}
func (UnimplementedOcpContactApiServer) MultiCreateContactsV1(context.Context, *MultiCreateContactsV1Request) (*MultiCreateContactsV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MultiCreateContactsV1 not implemented")
}
func (UnimplementedOcpContactApiServer) ListContactsV1(context.Context, *ListContactsV1Request) (*ListContactsV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListContactsV1 not implemented")
}
func (UnimplementedOcpContactApiServer) DescribeContactV1(context.Context, *DescribeContactV1Request) (*DescribeContactV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeContactV1 not implemented")
}
func (UnimplementedOcpContactApiServer) CreateContactV1(context.Context, *CreateContactV1Request) (*CreateContactV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateContactV1 not implemented")
}
func (UnimplementedOcpContactApiServer) RemoveContactV1(context.Context, *RemoveContactV1Request) (*RemoveContactV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveContactV1 not implemented")
}
func (UnimplementedOcpContactApiServer) mustEmbedUnimplementedOcpContactApiServer() {}

// UnsafeOcpContactApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OcpContactApiServer will
// result in compilation errors.
type UnsafeOcpContactApiServer interface {
	mustEmbedUnimplementedOcpContactApiServer()
}

func RegisterOcpContactApiServer(s grpc.ServiceRegistrar, srv OcpContactApiServer) {
	s.RegisterService(&OcpContactApi_ServiceDesc, srv)
}

func _OcpContactApi_UpdateContactV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateContactV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpContactApiServer).UpdateContactV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.contact.api.OcpContactApi/UpdateContactV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpContactApiServer).UpdateContactV1(ctx, req.(*UpdateContactV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpContactApi_MultiCreateContactsV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiCreateContactsV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpContactApiServer).MultiCreateContactsV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.contact.api.OcpContactApi/MultiCreateContactsV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpContactApiServer).MultiCreateContactsV1(ctx, req.(*MultiCreateContactsV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpContactApi_ListContactsV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListContactsV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpContactApiServer).ListContactsV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.contact.api.OcpContactApi/ListContactsV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpContactApiServer).ListContactsV1(ctx, req.(*ListContactsV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpContactApi_DescribeContactV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeContactV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpContactApiServer).DescribeContactV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.contact.api.OcpContactApi/DescribeContactV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpContactApiServer).DescribeContactV1(ctx, req.(*DescribeContactV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpContactApi_CreateContactV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateContactV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpContactApiServer).CreateContactV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.contact.api.OcpContactApi/CreateContactV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpContactApiServer).CreateContactV1(ctx, req.(*CreateContactV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpContactApi_RemoveContactV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveContactV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpContactApiServer).RemoveContactV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.contact.api.OcpContactApi/RemoveContactV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpContactApiServer).RemoveContactV1(ctx, req.(*RemoveContactV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

// OcpContactApi_ServiceDesc is the grpc.ServiceDesc for OcpContactApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OcpContactApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ocp.contact.api.OcpContactApi",
	HandlerType: (*OcpContactApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateContactV1",
			Handler:    _OcpContactApi_UpdateContactV1_Handler,
		},
		{
			MethodName: "MultiCreateContactsV1",
			Handler:    _OcpContactApi_MultiCreateContactsV1_Handler,
		},
		{
			MethodName: "ListContactsV1",
			Handler:    _OcpContactApi_ListContactsV1_Handler,
		},
		{
			MethodName: "DescribeContactV1",
			Handler:    _OcpContactApi_DescribeContactV1_Handler,
		},
		{
			MethodName: "CreateContactV1",
			Handler:    _OcpContactApi_CreateContactV1_Handler,
		},
		{
			MethodName: "RemoveContactV1",
			Handler:    _OcpContactApi_RemoveContactV1_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/ocp-contact-api/ocp-contact-api.proto",
}
