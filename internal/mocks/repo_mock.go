// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ozoncp/ocp-contact-api/internal/repo (interfaces: Repo)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/ozoncp/ocp-contact-api/internal/models"
)

// MockRepo is a mock of Repo interface.
type MockRepo struct {
	ctrl     *gomock.Controller
	recorder *MockRepoMockRecorder
}

// MockRepoMockRecorder is the mock recorder for MockRepo.
type MockRepoMockRecorder struct {
	mock *MockRepo
}

// NewMockRepo creates a new mock instance.
func NewMockRepo(ctrl *gomock.Controller) *MockRepo {
	mock := &MockRepo{ctrl: ctrl}
	mock.recorder = &MockRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepo) EXPECT() *MockRepoMockRecorder {
	return m.recorder
}

// AddContacts mocks base method.
func (m *MockRepo) AddContacts(arg0 context.Context, arg1 []models.Contact) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddContacts", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddContacts indicates an expected call of AddContacts.
func (mr *MockRepoMockRecorder) AddContacts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddContacts", reflect.TypeOf((*MockRepo)(nil).AddContacts), arg0, arg1)
}

// CreateContact mocks base method.
func (m *MockRepo) CreateContact(arg0 context.Context, arg1 models.Contact) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateContact", arg0, arg1)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateContact indicates an expected call of CreateContact.
func (mr *MockRepoMockRecorder) CreateContact(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContact", reflect.TypeOf((*MockRepo)(nil).CreateContact), arg0, arg1)
}

// DescribeContact mocks base method.
func (m *MockRepo) DescribeContact(arg0 context.Context, arg1 uint64) (*models.Contact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeContact", arg0, arg1)
	ret0, _ := ret[0].(*models.Contact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeContact indicates an expected call of DescribeContact.
func (mr *MockRepoMockRecorder) DescribeContact(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeContact", reflect.TypeOf((*MockRepo)(nil).DescribeContact), arg0, arg1)
}

// ListContacts mocks base method.
func (m *MockRepo) ListContacts(arg0 context.Context, arg1, arg2 uint64) ([]models.Contact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListContacts", arg0, arg1, arg2)
	ret0, _ := ret[0].([]models.Contact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListContacts indicates an expected call of ListContacts.
func (mr *MockRepoMockRecorder) ListContacts(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListContacts", reflect.TypeOf((*MockRepo)(nil).ListContacts), arg0, arg1, arg2)
}

// RemoveContact mocks base method.
func (m *MockRepo) RemoveContact(arg0 context.Context, arg1 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveContact", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveContact indicates an expected call of RemoveContact.
func (mr *MockRepoMockRecorder) RemoveContact(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveContact", reflect.TypeOf((*MockRepo)(nil).RemoveContact), arg0, arg1)
}

// UpdateContact mocks base method.
func (m *MockRepo) UpdateContact(arg0 context.Context, arg1 models.Contact) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateContact", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateContact indicates an expected call of UpdateContact.
func (mr *MockRepoMockRecorder) UpdateContact(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContact", reflect.TypeOf((*MockRepo)(nil).UpdateContact), arg0, arg1)
}
